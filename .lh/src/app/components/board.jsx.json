{
    "sourceFile": "src/app/components/board.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1741922794245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741922810710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \t);\r\n \r\n \tconst [moveVector, setMoveVector] = useState({ direction: \"horizontal\", amount: 1 });\r\n \tconst [snakeHead, setSnakeHead] = useState({ x: 4, y: 4 });\r\n-\tconst [snake, setSnake] = useState([]);\r\n+\tconst [snake, setSnake] = useState([{ x: 4, y: 4 }, { x: 3, y: 4 }, { x: 2, y: 4 }]);\r\n \r\n \tuseEffect(() => {\r\n \t\tboardRef.current.focus();\r\n \r\n"
                },
                {
                    "date": 1741922909644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \t\t\t\t>\r\n \t\t\t\t\t{row.map((cell, cellIndex) => (\r\n \t\t\t\t\t\t<div\r\n \t\t\t\t\t\t\tclassName={`w-[50px] h-[50px] border border-white border-solid ${\r\n-\t\t\t\t\t\t\t\trowIndex === snakeHead.y && cellIndex === snakeHead.x\r\n+\t\t\t\t\t\t\t\tsnake.find(x => x.y === rowIndex) && snake.find(x => x.x === cellIndex)\r\n \t\t\t\t\t\t\t\t\t? \"bg-(--secondary-green)\"\r\n \t\t\t\t\t\t\t\t\t: \"\"\r\n \t\t\t\t\t\t\t}`}\r\n \t\t\t\t\t\t\tkey={cellIndex}\r\n"
                },
                {
                    "date": 1741922925213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \t\tboardRef.current.focus();\r\n \r\n \t\tconst interval = setInterval(() => {\r\n \t\t\tboardRef.current.focus();\r\n-\t\t\tmoveSnake();\r\n+\t\t\t//moveSnake();\r\n \t\t}, 75);\r\n \r\n \t\treturn () => clearInterval(interval);\r\n \t}, [snakeHead, moveVector]);\r\n"
                },
                {
                    "date": 1741923031068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n \t};\r\n \r\n-\tconst moveSnake = () => {\r\n+\tconst moveSnakeHead = () => {\r\n \t\tsetSnakeHead((prev) => {\r\n \t\t\tif (moveVector.direction === \"vertical\") {\r\n                 if (prev.y + moveVector.amount < BOARD_SIZE && prev.y + moveVector.amount >= 0 ) return{ x: prev.x, y: prev.y + moveVector.amount };\r\n \t\t\t\telse return{ x: prev.x, y: prev.y };\r\n"
                },
                {
                    "date": 1741923050603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,14 @@\n \t\t\t}\r\n \t\t});\r\n \t};\r\n \r\n+\tconst moveSnake = () => {\r\n+\t\tsetSnake((prev) => {\r\n+\t\t\t\r\n+\t\t})\r\n+\t}\r\n+\r\n \treturn (\r\n \t\t<div\r\n \t\t\tclassName=\"border border-white border-solid focus:outline-none\"\r\n \t\t\tref={boardRef}\r\n"
                },
                {
                    "date": 1741923087849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,13 @@\n \t};\r\n \r\n \tconst moveSnake = () => {\r\n \t\tsetSnake((prev) => {\r\n-\t\t\t\r\n+\t\t\tif (moveVector.direction === \"vertical\") {\r\n+                \r\n+\t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n+                \r\n+\t\t\t}\r\n \t\t})\r\n \t}\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741923326248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,14 @@\n \r\n \tconst moveSnake = () => {\r\n \t\tsetSnake((prev) => {\r\n \t\t\tif (moveVector.direction === \"vertical\") {\r\n-                \r\n+\t\t\t\tlet newSnake = [...prev];\r\n+                let head = {...prev[0]}\r\n+\t\t\t\thead.y += moveVector.amount;\r\n+\t\t\t\tnewSnake.unshift(head);\r\n+\t\t\t\tnewSnake.pop();\r\n+\t\t\t\treturn newSnake;\r\n \t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n                 \r\n \t\t\t}\r\n \t\t})\r\n"
                },
                {
                    "date": 1741923333496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,14 @@\n \t\t\t\tnewSnake.unshift(head);\r\n \t\t\t\tnewSnake.pop();\r\n \t\t\t\treturn newSnake;\r\n \t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n-                \r\n+                let newSnake = [...prev];\r\n+                let head = {...prev[0]}\r\n+\t\t\t\thead.x += moveVector.amount;\r\n+\t\t\t\tnewSnake.unshift(head);\r\n+\t\t\t\tnewSnake.pop();\r\n+\t\t\t\treturn newSnake;\r\n \t\t\t}\r\n \t\t})\r\n \t}\r\n \r\n"
                },
                {
                    "date": 1741923341040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \t\tboardRef.current.focus();\r\n \r\n \t\tconst interval = setInterval(() => {\r\n \t\t\tboardRef.current.focus();\r\n-\t\t\t//moveSnake();\r\n+\t\t\tmoveSnake();\r\n \t\t}, 75);\r\n \r\n \t\treturn () => clearInterval(interval);\r\n \t}, [snakeHead, moveVector]);\r\n"
                },
                {
                    "date": 1741923357222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n \t\tconst interval = setInterval(() => {\r\n \t\t\tboardRef.current.focus();\r\n \t\t\tmoveSnake();\r\n-\t\t}, 75);\r\n+\t\t}, 1000);\r\n \r\n \t\treturn () => clearInterval(interval);\r\n \t}, [snakeHead, moveVector]);\r\n \r\n"
                },
                {
                    "date": 1741923430749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \tuseEffect(() => {\r\n \t\tboardRef.current.focus();\r\n \r\n \t\tconst interval = setInterval(() => {\r\n+\t\t\tconsole.log(snake);\r\n \t\t\tboardRef.current.focus();\r\n \t\t\tmoveSnake();\r\n \t\t}, 1000);\r\n \r\n"
                },
                {
                    "date": 1741923486928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\tmoveSnake();\r\n \t\t}, 1000);\r\n \r\n \t\treturn () => clearInterval(interval);\r\n-\t}, [snakeHead, moveVector]);\r\n+\t}, [snake, moveVector]);\r\n \r\n \tconst handleKeyDown = (event) => {\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n"
                },
                {
                    "date": 1741923663925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n \t\t\t\t>\r\n \t\t\t\t\t{row.map((cell, cellIndex) => (\r\n \t\t\t\t\t\t<div\r\n \t\t\t\t\t\t\tclassName={`w-[50px] h-[50px] border border-white border-solid ${\r\n-\t\t\t\t\t\t\t\tsnake.find(x => x.y === rowIndex) && snake.find(x => x.x === cellIndex)\r\n+\t\t\t\t\t\t\t\tsnake.some(segment => segment.x === cellIndex && segment.y === rowIndex)\r\n \t\t\t\t\t\t\t\t\t? \"bg-(--secondary-green)\"\r\n \t\t\t\t\t\t\t\t\t: \"\"\r\n \t\t\t\t\t\t\t}`}\r\n \t\t\t\t\t\t\tkey={cellIndex}\r\n"
                },
                {
                    "date": 1741923703927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,13 @@\n \t\t\t}\r\n \t\t})\r\n \t}\r\n \r\n+\tconst hitWall = () => {\r\n+\t\tif (snakeHead.x < 0 || snakeHead.x >= BOARD_SIZE || snakeHead.y < 0 || snakeHead.y >= BOARD_SIZE) return true;\r\n+\t\telse return false;\r\n+\t};\r\n+\r\n \treturn (\r\n \t\t<div\r\n \t\t\tclassName=\"border border-white border-solid focus:outline-none\"\r\n \t\t\tref={boardRef}\r\n"
                },
                {
                    "date": 1741923712361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n \t\t});\r\n \t};\r\n \r\n \tconst moveSnake = () => {\r\n+\t\tif (hitWall()) return;\r\n \t\tsetSnake((prev) => {\r\n \t\t\tif (moveVector.direction === \"vertical\") {\r\n \t\t\t\tlet newSnake = [...prev];\r\n                 let head = {...prev[0]}\r\n"
                },
                {
                    "date": 1741923774185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n-\t\tif (snakeHead.x < 0 || snakeHead.x >= BOARD_SIZE || snakeHead.y < 0 || snakeHead.y >= BOARD_SIZE) return true;\r\n+\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE || snake[0].y < 0 || snake[0].y >= BOARD_SIZE) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741923790112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n-\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE || snake[0].y < 0 || snake[0].y >= BOARD_SIZE) return true;\r\n+\t\tif (snake[0].x < 0 || snake[0].x > BOARD_SIZE || snake[0].y < 0 || snake[0].y > BOARD_SIZE) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741923796506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n-\t\tif (snake[0].x < 0 || snake[0].x > BOARD_SIZE || snake[0].y < 0 || snake[0].y > BOARD_SIZE) return true;\r\n+\t\tif (snake[0].x <= 0 || snake[0].x > BOARD_SIZE || snake[0].y <= 0 || snake[0].y > BOARD_SIZE) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741923920338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n-\t\tif (snake[0].x <= 0 || snake[0].x > BOARD_SIZE || snake[0].y <= 0 || snake[0].y > BOARD_SIZE) return true;\r\n+\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE || snake[0].y < 0 || snake[0].y >= BOARD_SIZE) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741923978985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n-\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE || snake[0].y < 0 || snake[0].y >= BOARD_SIZE) return true;\r\n+\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE - 1 || snake[0].y < 0 || snake[0].y >= BOARD_SIZE - 1) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n"
                },
                {
                    "date": 1741924201413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,15 @@\n \t\t})\r\n \t}\r\n \r\n \tconst hitWall = () => {\r\n+\t\tif ( moveVector.direction === \"vertical\") {\r\n+\r\n+\t\t}\r\n+\t\telse if ( moveVector.direction === \"horizontal\") {\r\n+\t\t\tif ( snake[0].x + moveVector.amount >= BOARD_SIZE || snake[0].x + moveVector.amount < 0) return true;\r\n+\t\t\telse return false;\r\n+\t\t}\r\n \t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE - 1 || snake[0].y < 0 || snake[0].y >= BOARD_SIZE - 1) return true;\r\n \t\telse return false;\r\n \t};\r\n \r\n"
                },
                {
                    "date": 1741924215379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,16 +66,15 @@\n \t}\r\n \r\n \tconst hitWall = () => {\r\n \t\tif ( moveVector.direction === \"vertical\") {\r\n-\r\n+\t\t\tif ( snake[0].y + moveVector.amount >= BOARD_SIZE || snake[0].y + moveVector.amount < 0) return true;\r\n+\t\t\telse return false;\r\n \t\t}\r\n \t\telse if ( moveVector.direction === \"horizontal\") {\r\n \t\t\tif ( snake[0].x + moveVector.amount >= BOARD_SIZE || snake[0].x + moveVector.amount < 0) return true;\r\n \t\t\telse return false;\r\n \t\t}\r\n-\t\tif (snake[0].x < 0 || snake[0].x >= BOARD_SIZE - 1 || snake[0].y < 0 || snake[0].y >= BOARD_SIZE - 1) return true;\r\n-\t\telse return false;\r\n \t};\r\n \r\n \treturn (\r\n \t\t<div\r\n"
                },
                {
                    "date": 1741924263782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n \t\t});\r\n \t};\r\n \r\n \tconst moveSnake = () => {\r\n-\t\tif (hitWall()) return;\r\n \t\tsetSnake((prev) => {\r\n+\t\t\tif (hitWall()) return prev;\r\n \t\t\tif (moveVector.direction === \"vertical\") {\r\n \t\t\t\tlet newSnake = [...prev];\r\n                 let head = {...prev[0]}\r\n \t\t\t\thead.y += moveVector.amount;\r\n"
                },
                {
                    "date": 1741924321846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,14 @@\n \t\tnew Array(BOARD_SIZE).fill(0).map((row) => new Array(BOARD_SIZE).fill(0))\r\n \t);\r\n \r\n \tconst [moveVector, setMoveVector] = useState({ direction: \"horizontal\", amount: 1 });\r\n-\tconst [snakeHead, setSnakeHead] = useState({ x: 4, y: 4 });\r\n \tconst [snake, setSnake] = useState([{ x: 4, y: 4 }, { x: 3, y: 4 }, { x: 2, y: 4 }]);\r\n \r\n \tuseEffect(() => {\r\n \t\tboardRef.current.focus();\r\n \r\n \t\tconst interval = setInterval(() => {\r\n-\t\t\tconsole.log(snake);\r\n \t\t\tboardRef.current.focus();\r\n \t\t\tmoveSnake();\r\n \t\t}, 1000);\r\n \r\n@@ -31,20 +29,8 @@\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n \t};\r\n \r\n-\tconst moveSnakeHead = () => {\r\n-\t\tsetSnakeHead((prev) => {\r\n-\t\t\tif (moveVector.direction === \"vertical\") {\r\n-                if (prev.y + moveVector.amount < BOARD_SIZE && prev.y + moveVector.amount >= 0 ) return{ x: prev.x, y: prev.y + moveVector.amount };\r\n-\t\t\t\telse return{ x: prev.x, y: prev.y };\r\n-\t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n-                if (prev.x + moveVector.amount < BOARD_SIZE && prev.x + moveVector.amount >= 0 ) return{ x: prev.x + moveVector.amount, y: prev.y };\r\n-\t\t\t\telse return{ x: prev.x, y: prev.y };\r\n-\t\t\t}\r\n-\t\t});\r\n-\t};\r\n-\r\n \tconst moveSnake = () => {\r\n \t\tsetSnake((prev) => {\r\n \t\t\tif (hitWall()) return prev;\r\n \t\t\tif (moveVector.direction === \"vertical\") {\r\n"
                },
                {
                    "date": 1741924409883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,15 @@\n \t\treturn () => clearInterval(interval);\r\n \t}, [snake, moveVector]);\r\n \r\n \tconst handleKeyDown = (event) => {\r\n+\r\n+\t\tif ( moveVector.direction === \"vertical\") {\r\n+\t\t\tif (event.key !== \"w\" && event.key !== \"s\") return;\r\n+\t\t}\r\n+\t\telse if ( moveVector.direction === \"horizontal\") {\r\n+\t\t\tif (event.key !== \"a\" && event.key !== \"d\") return;\r\n+\t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n"
                },
                {
                    "date": 1741924438143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n \t\tif ( moveVector.direction === \"vertical\") {\r\n-\t\t\tif (event.key !== \"w\" && event.key !== \"s\") return;\r\n+\t\t\tif (event.key === \"w\" && event.key === \"s\") return;\r\n \t\t}\r\n \t\telse if ( moveVector.direction === \"horizontal\") {\r\n-\t\t\tif (event.key !== \"a\" && event.key !== \"d\") return;\r\n+\t\t\tif (event.key === \"a\" && event.key === \"d\") return;\r\n \t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n"
                },
                {
                    "date": 1741924470015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n \t\tif ( moveVector.direction === \"vertical\") {\r\n-\t\t\tif (event.key === \"w\" && event.key === \"s\") return;\r\n+\t\t\tif (event.key === \"w\" || event.key === \"s\") return;\r\n \t\t}\r\n \t\telse if ( moveVector.direction === \"horizontal\") {\r\n-\t\t\tif (event.key === \"a\" && event.key === \"d\") return;\r\n+\t\t\tif (event.key === \"a\" || event.key === \"d\") return;\r\n \t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n"
                },
                {
                    "date": 1741924499675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n \t\tconst interval = setInterval(() => {\r\n \t\t\tboardRef.current.focus();\r\n \t\t\tmoveSnake();\r\n-\t\t}, 1000);\r\n+\t\t}, 75);\r\n \r\n \t\treturn () => clearInterval(interval);\r\n \t}, [snake, moveVector]);\r\n \r\n"
                },
                {
                    "date": 1741924530304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n+\t\tmoveSnake();\r\n \t};\r\n \r\n \tconst moveSnake = () => {\r\n \t\tsetSnake((prev) => {\r\n"
                },
                {
                    "date": 1741924736220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n \t}, [snake, moveVector]);\r\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n-\t\tif ( moveVector.direction === \"vertical\") {\r\n-\t\t\tif (event.key === \"w\" || event.key === \"s\") return;\r\n-\t\t}\r\n-\t\telse if ( moveVector.direction === \"horizontal\") {\r\n-\t\t\tif (event.key === \"a\" || event.key === \"d\") return;\r\n-\t\t}\r\n+\t\t// if ( moveVector.direction === \"vertical\") {\r\n+\t\t// \tif (event.key === \"w\" || event.key === \"s\") return;\r\n+\t\t// }\r\n+\t\t// else if ( moveVector.direction === \"horizontal\") {\r\n+\t\t// \tif (event.key === \"a\" || event.key === \"d\") return;\r\n+\t\t// }\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n"
                },
                {
                    "date": 1741924808182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n \t}, [snake, moveVector]);\r\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n-\t\t// if ( moveVector.direction === \"vertical\") {\r\n-\t\t// \tif (event.key === \"w\" || event.key === \"s\") return;\r\n-\t\t// }\r\n-\t\t// else if ( moveVector.direction === \"horizontal\") {\r\n-\t\t// \tif (event.key === \"a\" || event.key === \"d\") return;\r\n-\t\t// }\r\n+\t\tif ( moveVector.direction === \"vertical\") {\r\n+\t\t\tif ((event.key === \"w\" && moveVector.amount === 1) ||( event.key === \"s\" && moveVector.amount === -1)) return;\r\n+\t\t}\r\n+\t\telse if ( moveVector.direction === \"horizontal\") {\r\n+\t\t\tif ((event.key === \"a\" && moveVector.amount === 1) || (event.key === \"d\" && moveVector.amount === -1)) return;\r\n+\t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n \t\tsetMoveVector({ direction: direction, amount: amount });\r\n"
                },
                {
                    "date": 1741924826473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n \t\tif ( moveVector.direction === \"vertical\") {\r\n-\t\t\tif ((event.key === \"w\" && moveVector.amount === 1) ||( event.key === \"s\" && moveVector.amount === -1)) return;\r\n+\t\t\tif ((event.key === \"w\" && moveVector.amount === -1) ||( event.key === \"s\" && moveVector.amount === 1)) return;\r\n \t\t}\r\n \t\telse if ( moveVector.direction === \"horizontal\") {\r\n-\t\t\tif ((event.key === \"a\" && moveVector.amount === 1) || (event.key === \"d\" && moveVector.amount === -1)) return;\r\n+\t\t\tif ((event.key === \"a\" && moveVector.amount === -1) || (event.key === \"d\" && moveVector.amount === 1)) return;\r\n \t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n"
                },
                {
                    "date": 1741924864651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n \r\n \tconst handleKeyDown = (event) => {\r\n \r\n \t\tif ( moveVector.direction === \"vertical\") {\r\n-\t\t\tif ((event.key === \"w\" && moveVector.amount === -1) ||( event.key === \"s\" && moveVector.amount === 1)) return;\r\n+\t\t\tif ((event.key === \"w\" && moveVector.amount === 1) ||( event.key === \"s\" && moveVector.amount === -1)) return;\r\n \t\t}\r\n \t\telse if ( moveVector.direction === \"horizontal\") {\r\n-\t\t\tif ((event.key === \"a\" && moveVector.amount === -1) || (event.key === \"d\" && moveVector.amount === 1)) return;\r\n+\t\t\tif ((event.key === \"a\" && moveVector.amount === 1) || (event.key === \"d\" && moveVector.amount === -1)) return;\r\n \t\t}\r\n \t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n \t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n \r\n"
                },
                {
                    "date": 1741924918582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useState, useEffect, useRef } from \"react\";\r\n \r\n const Board = () => {\r\n \tconst BOARD_SIZE = 10;\r\n+\tconst SNAKE_SPEED = 75;\r\n \tconst boardRef = useRef(null);\r\n \tconst [board, setBoard] = useState(\r\n \t\tnew Array(BOARD_SIZE).fill(0).map((row) => new Array(BOARD_SIZE).fill(0))\r\n \t);\r\n"
                },
                {
                    "date": 1741924928555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect, useRef } from \"react\";\r\n+\r\n+const Board = () => {\r\n+\tconst BOARD_SIZE = 10;\r\n+\tconst SNAKE_SPEED = 75;\r\n+\tconst boardRef = useRef(null);\r\n+\tconst [board, setBoard] = useState(\r\n+\t\tnew Array(BOARD_SIZE).fill(0).map((row) => new Array(BOARD_SIZE).fill(0))\r\n+\t);\r\n+\r\n+\tconst [moveVector, setMoveVector] = useState({ direction: \"horizontal\", amount: 1 });\r\n+\tconst [snake, setSnake] = useState([{ x: 4, y: 4 }, { x: 3, y: 4 }, { x: 2, y: 4 }]);\r\n+\r\n+\tuseEffect(() => {\r\n+\t\tboardRef.current.focus();\r\n+\r\n+\t\tconst interval = setInterval(() => {\r\n+\t\t\tboardRef.current.focus();\r\n+\t\t\tmoveSnake();\r\n+\t\t}, SNAKE_SPEED);\r\n+\r\n+\t\treturn () => clearInterval(interval);\r\n+\t}, [snake, moveVector]);\r\n+\r\n+\tconst handleKeyDown = (event) => {\r\n+\r\n+\t\tif ( moveVector.direction === \"vertical\") {\r\n+\t\t\tif ((event.key === \"w\" && moveVector.amount === 1) ||( event.key === \"s\" && moveVector.amount === -1)) return;\r\n+\t\t}\r\n+\t\telse if ( moveVector.direction === \"horizontal\") {\r\n+\t\t\tif ((event.key === \"a\" && moveVector.amount === 1) || (event.key === \"d\" && moveVector.amount === -1)) return;\r\n+\t\t}\r\n+\t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n+\t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n+\r\n+\t\tsetMoveVector({ direction: direction, amount: amount });\r\n+\t\tmoveSnake();\r\n+\t};\r\n+\r\n+\tconst moveSnake = () => {\r\n+\t\tsetSnake((prev) => {\r\n+\t\t\tif (hitWall()) return prev;\r\n+\t\t\tif (moveVector.direction === \"vertical\") {\r\n+\t\t\t\tlet newSnake = [...prev];\r\n+                let head = {...prev[0]}\r\n+\t\t\t\thead.y += moveVector.amount;\r\n+\t\t\t\tnewSnake.unshift(head);\r\n+\t\t\t\tnewSnake.pop();\r\n+\t\t\t\treturn newSnake;\r\n+\t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n+                let newSnake = [...prev];\r\n+                let head = {...prev[0]}\r\n+\t\t\t\thead.x += moveVector.amount;\r\n+\t\t\t\tnewSnake.unshift(head);\r\n+\t\t\t\tnewSnake.pop();\r\n+\t\t\t\treturn newSnake;\r\n+\t\t\t}\r\n+\t\t})\r\n+\t}\r\n+\r\n+\tconst hitWall = () => {\r\n+\t\tif ( moveVector.direction === \"vertical\") {\r\n+\t\t\tif ( snake[0].y + moveVector.amount >= BOARD_SIZE || snake[0].y + moveVector.amount < 0) return true;\r\n+\t\t\telse return false;\r\n+\t\t}\r\n+\t\telse if ( moveVector.direction === \"horizontal\") {\r\n+\t\t\tif ( snake[0].x + moveVector.amount >= BOARD_SIZE || snake[0].x + moveVector.amount < 0) return true;\r\n+\t\t\telse return false;\r\n+\t\t}\r\n+\t};\r\n+\r\n+\treturn (\r\n+\t\t<div\r\n+\t\t\tclassName=\"border border-white border-solid focus:outline-none\"\r\n+\t\t\tref={boardRef}\r\n+\t\t\tonKeyDown={handleKeyDown}\r\n+\t\t\ttabIndex={-1}\r\n+\t\t>\r\n+\t\t\t<p>\r\n+\t\t\t\t{moveVector.direction} {moveVector.amount}\r\n+\t\t\t</p>\r\n+\t\t\t{board.map((row, rowIndex) => (\r\n+\t\t\t\t<div\r\n+\t\t\t\t\tclassName=\"flex\"\r\n+\t\t\t\t\tkey={rowIndex}\r\n+\t\t\t\t>\r\n+\t\t\t\t\t{row.map((cell, cellIndex) => (\r\n+\t\t\t\t\t\t<div\r\n+\t\t\t\t\t\t\tclassName={`w-[50px] h-[50px] border border-white border-solid ${\r\n+\t\t\t\t\t\t\t\tsnake.some(segment => segment.x === cellIndex && segment.y === rowIndex)\r\n+\t\t\t\t\t\t\t\t\t? \"bg-(--secondary-green)\"\r\n+\t\t\t\t\t\t\t\t\t: \"\"\r\n+\t\t\t\t\t\t\t}`}\r\n+\t\t\t\t\t\t\tkey={cellIndex}\r\n+\t\t\t\t\t\t\tcoords={`x: ${rowIndex}, y: ${cellIndex}`}\r\n+\t\t\t\t\t\t></div>\r\n+\t\t\t\t\t))}\r\n+\t\t\t\t</div>\r\n+\t\t\t))}\r\n+\t\t</div>\r\n+\t);\r\n+};\r\n+\r\n+export default Board;\r\n"
                }
            ],
            "date": 1741922794245,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Board = () => {\r\n\tconst BOARD_SIZE = 10;\r\n\tconst boardRef = useRef(null);\r\n\tconst [board, setBoard] = useState(\r\n\t\tnew Array(BOARD_SIZE).fill(0).map((row) => new Array(BOARD_SIZE).fill(0))\r\n\t);\r\n\r\n\tconst [moveVector, setMoveVector] = useState({ direction: \"horizontal\", amount: 1 });\r\n\tconst [snakeHead, setSnakeHead] = useState({ x: 4, y: 4 });\r\n\tconst [snake, setSnake] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tboardRef.current.focus();\r\n\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tboardRef.current.focus();\r\n\t\t\tmoveSnake();\r\n\t\t}, 75);\r\n\r\n\t\treturn () => clearInterval(interval);\r\n\t}, [snakeHead, moveVector]);\r\n\r\n\tconst handleKeyDown = (event) => {\r\n\t\tconst direction = event.key === \"w\" || event.key === \"s\" ? \"vertical\" : \"horizontal\";\r\n\t\tconst amount = event.key === \"w\" || event.key === \"a\" ? -1 : 1;\r\n\r\n\t\tsetMoveVector({ direction: direction, amount: amount });\r\n\t};\r\n\r\n\tconst moveSnake = () => {\r\n\t\tsetSnakeHead((prev) => {\r\n\t\t\tif (moveVector.direction === \"vertical\") {\r\n                if (prev.y + moveVector.amount < BOARD_SIZE && prev.y + moveVector.amount >= 0 ) return{ x: prev.x, y: prev.y + moveVector.amount };\r\n\t\t\t\telse return{ x: prev.x, y: prev.y };\r\n\t\t\t} else if (moveVector.direction === \"horizontal\") {\r\n                if (prev.x + moveVector.amount < BOARD_SIZE && prev.x + moveVector.amount >= 0 ) return{ x: prev.x + moveVector.amount, y: prev.y };\r\n\t\t\t\telse return{ x: prev.x, y: prev.y };\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"border border-white border-solid focus:outline-none\"\r\n\t\t\tref={boardRef}\r\n\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\ttabIndex={-1}\r\n\t\t>\r\n\t\t\t<p>\r\n\t\t\t\t{moveVector.direction} {moveVector.amount}\r\n\t\t\t</p>\r\n\t\t\t{board.map((row, rowIndex) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"flex\"\r\n\t\t\t\t\tkey={rowIndex}\r\n\t\t\t\t>\r\n\t\t\t\t\t{row.map((cell, cellIndex) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={`w-[50px] h-[50px] border border-white border-solid ${\r\n\t\t\t\t\t\t\t\trowIndex === snakeHead.y && cellIndex === snakeHead.x\r\n\t\t\t\t\t\t\t\t\t? \"bg-(--secondary-green)\"\r\n\t\t\t\t\t\t\t\t\t: \"\"\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tkey={cellIndex}\r\n\t\t\t\t\t\t\tcoords={`x: ${rowIndex}, y: ${cellIndex}`}\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n"
        }
    ]
}